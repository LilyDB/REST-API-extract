# -*- coding: utf-8 -*-
"""REST procedure.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b952tuT_3PNpDwFdOqqQodpX44Y5LRJ4
"""

import requests #For REST job
import json 
import time
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
#from numpy import mean
from datetime import datetime 
import math
from math import ceil
from scipy.stats import norm


class get_rest_data(object)

  def __init__(self,typeid, customer_id_list, start_date, end_date, user, password):
    self.typeid = typeid
    self.customer_id_list = customer_id_list
    self.start_date = start_date
    self.end_date = end_date
    self.user = user
    self.password = password

  def get_all_track(self):
    # Create dataframe list
        df_list_ = []

        for customer_id in self.customer_id_list:
            df = get_single_track(typeid,
                                  customer_id,
                                  start_date,
                                  end_date,
                                  user,
                                  password)
            
            df_list_.append(df)
        
        all_Customers = pd.DataFrame()
        all_Customers = pd.concat(df_list_, ignore_index=True)

        process_end = datetime.now()
    
        print('process end ' +str(process_end))      
        return all_Customers

  def get_single_track(self,customer_id):
    # typeid == 'mmsi':
    # customer_id == 311000635
    # start_date = %Y-%m-%dT%H:%M:%SZ
    # end_date = %Y-%m-%dT%H:%M:%SZ
          self.customer_id = customer_id

          # Prepare parameters
          url    ='http://customer.com'
          suffix ='/customer/historical/track'
          # Convert time period for data collection
          startdate  =  time.mktime(time.strptime(start_date,"%Y-%m-%dT%H:%M:%SZ"))
          enddate    =  time.mktime(time.strptime(end_date,"%Y-%m-%dT%H:%M:%SZ"))       
        
          # Dictionary of parameters   
          send_dict={       
                      "Customer": { typeid:int(customer_id), },
                      "begin":time.strftime( "%Y-%m-%dT%H:%M:%SZ" , 
                                            time.gmtime(startdate) ),
                      "end":time.strftime( "%Y-%m-%dT%H:%M:%SZ" ,
                                          time.gmtime(enddate) ), 
                      }             

      
          ###### Post, request, read 
          #Post to server
          post_r = requests.post(url+suffix, 
                                json=send_dict, 
                                auth=(user, password))

          #Check if response makes sense/includes id
          if 'id' in  post_r.json():
              pass
          else:
              print('ERROR. Something went wrong. Code:'+str(post_r.json()['message']))

          #Loop waiting for results to be available
          waiting_time=1
          delta_t=2

          for n in range(0,10):
              #Wait for server to prepare files
              time.sleep(waiting_time) 
              resp = requests.get(url+suffix+'/'+str(post_r.json()['id']), 
                                  auth=(user, password))
              if resp.status_code == 202:
                    pass
              elif resp.status_code == 422:
                    print('ERROR: Customer not found. Check ' + str(typeid)+':'+str(customer_id))
                    return None
              elif resp.status_code == 200:
                    
                    result=resp.json()
                    
                    if typeid == 'mmsi':
                      mmsi = result['Customer']['mmsi']
                      if 'imo' in result['Customer']:
                        imo = result['Customer']['imo']
                      else:
                        imo = 'not_found'
                        
                    elif typeid =='imo':
                      imo = result['Customer']['imo']
                      if 'mmsi' in result['Customer']:
                        mmsi = result['Customer']['mmsi']
                      else:
                        mmsi = 'not_found'
            
                    if 'coordinates' not in result['track']:
                      print('This customer ' + 'imo ' + str(imo) +' and ' + 'mmsi '+ str(mmsi) \
                            + ' has no historical track from ' + str(start_date) +  ' to ' + str(end_date))
                    else:
                      df         =   pd.DataFrame(data=np.array(result['track']['coordinates'])[:,[0,1,2,4]],    # values
                      columns    =   ['latitude','longitude','date','speed'])  # 1st row as the column name
                      df['date'] =   pd.to_datetime(df['date'])
                      df['speed'] =   df['speed'].astype('float64')
                      df['imo']  = imo
                      df['mmsi'] = mmsi
                      print('Found Customer: '+ str(typeid) + ' ' +str(customer_id))
                      return df
                      pass

if __name__=="__main__":
  typeid = 'imo'
  start_date="2020-11-01T00:00:00Z" 
  end_date="2020-11-19T23:59:59Z" 

  user='abc'
  password='abc'

  customer_id_list=(9167265,9595137,9583720,9834466)
  c = test(typeid, customer_id_list, start_date, end_date, user, password)
  c.get_all_track()



